<?php

/**
 * TwitterLogin module.
 *
 * Provide register and login via Twitter functionality.
 *
 * @copyright Copyright (C) 2014, Craig A Rodway <craig.rodway@gmail.com>
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 *
 * ---
 * TwitterOAuth (lib/twitteroauth)
 * Copyright (c) 2009 Abraham Williams
 * See lib/twitteroauth/LICENSE
 *
 * http://abrah.am - abraham@abrah.am
 * ---
 *
 * ---
 * ProcessWire 2.x
 * Copyright (C) 2013 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 * ---
 */

class TwitterLogin extends WireData implements Module, ConfigurableModule {

	const moduleName = 'twitter-login';
	const fieldName = 'twitter_id';

	private $debug = false;


	public static function getModuleInfo() {

		return array(
			'title' => 'Twitter login',
			'version' => 100,
			'summary' => 'Allows users to register or log in via Twitter.',
			'autoload' => false,
		);

	}


	public function init() { }


	/**
	 * Main entry point for the module.
	 *
	 * Redirects to Twitter or receives the response to do the logging in.
	 */
	public function execute() {

		$sess_token = $this->session->get('oauth_token');
		$sess_secret = $this->session->get('oauth_token_secret');

		require_once($config->paths->TwitterLogin . 'lib/twitteroauth/twitteroauth.php');

		if ($this->input->get('oauth_verifier') && $sess_token && $sess_secret) {

			// Receiving twitter response - user should be able to be logged in

			// Load Twitter OAuth lib with our details
			$twoauth = new TwitterOAuth($this->twitterKey, $this->twitterSecret, $sess_token, $sess_secret);
			$access_token = $twoauth->getAccessToken($this->input->get('oauth_verifier'));

			// Retrieve user details
			$twitterInfo = $twoauth->get('account/verify_credentials');

			if (isset($twitterInfo->errors)) {
				// Something bad happened.
				$reason = $twitterInfo->errors[0]->code . ': ' . $twitterInfo->errors[0]->message;
				$this->session->error('TwitterLogin API error. Reason: ' . $reason);
				$this->doRedirect();
				return;
			}

			$this->debug("execute(): Successfully retrieved user info from Twitter. Next: processLogin().");

			// Start logging them in (creating if necessary)
			$this->processLogin($twitterInfo);

		} else {

			// Load Twitter OAuth lib with our details
			$twoauth = new TwitterOAuth($this->twitterKey, $this->twitterSecret);

			$request_token = $twoauth->getRequestToken($this->page->httpUrl);

			// Store the token details in the session
			$this->session->set('oauth_token', $request_token['oauth_token']);
			$this->session->set('oauth_token_secret', $request_token['oauth_token_secret']);

			if ($twoauth->http_code == 200) {

				// If our response was good, we can redirect the user to Twitter to authorise/login
				$url = $twoauth->getAuthorizeURL($request_token['oauth_token']);
				$this->session->redirect($url);

			} else {

				// Something bad happened.
				$this->session->error('TwitterLogin API error. HTTP code ' . $twoauth->http_code);
				$this->doRedirect();
				return;
			}
		}
	}


	/**
	 * Process the details to log the user in.
	 *
	 * This deals with calling automatic user creation, updating, logging in and redirecting.
	 *
	 * @param object $twitterInfo		Twitter info object as returned from the API
	 *
	 */
	private function processLogin($twitterInfo) {

		$fieldName = self::fieldName;
		$moduleName = self::moduleName;

		// Get user by twitter ID
		$twitterId = (int) $twitterInfo->id;
		if (empty($twitterId)) return;
		$u = $this->users->get("{$fieldName}=$twitterId");

		$this->debug("processLogin(): Looking for user with query: {$fieldName}=$twitterId");

		$uniqid = uniqid();
		$pass = sha1($uniqid . $twitterInfo->id . $this->config->userAuthSalt);

		if ( ! $u->id) {

			// Does not exist. Create new user.
			$this->debug('User does not exist.');

			$name = $this->sanitizer->pageName($twitterInfo->screen_name, false);
			$u = $this->users->get("name=$name");

			// Check if a user already exists with their twitter username
			if ($u->id) {

				// Exists :(

				if ( ! isset($twitterInfo->_counter)) {
					$twitterInfo->_counter = 2;
					$twitterInfo->_origName = $twitterInfo->screen_name;
				} else {
					$twitterInfo->_counter++;
				}

				$twitterInfo->screen_name = $twitterInfo->_origName . $twitterInfo->_counter;

				$this->processLogin($twitterInfo);
				return;
			}

			// Good to create new user!

			$u = new User();
			$u->of(false);

			// Initially use a unique ID for user to avoid sanitizer pageName beautify unwanted stripping of chars
			$u->name = $uniqid;
			$u->pass = $pass;
			$u->save();

			// Set the name to the actual Twitter name
			$u->name = $name;
		}

		$this->debug("Got user. Name: " . $u->name);

		$u->of(false);

		// Call the hookable updateUser() method
		$this->updateUser($u, $twitterInfo);

		// Log them in!
		$this->doLogin($u, $pass);
	}


	/**
	 * Update a PW users details based on the Twitter information
	 *
	 * @param object $u		User object
	 * @param object $twitterInfo		Twitter info object as returned from the API
	 *
	 */
	public function ___updateUser($u, $twitterInfo) {

		$this->debug('TwitterLogin updateUser method');

		// Set user's Twitter ID field to the twitter ID value
		$u->set(self::fieldName, $twitterInfo->id);

		// Add default twitter-login role
		$u->addRole(self::moduleName);

		// Add user-configured roles
		if ( ! empty($this->addRoles)) {
			foreach ($this->addRoles as $role) {
				$u->addRole($role);
			}
		}

		// Save
		$u->save();
	}


	/**
	 * Handle the actual logging in of the user.
	 *
	 * This is achieved by storing temporary credentials in the session and
	 * hooking the session authenticate() method so we can take over the part
	 * of the authentication with our own credentials.
	 *
	 * @param object $u		User object
	 * @param string $pass		Temporary password
	 *
	 */
	private function doLogin($u, $pass = '') {

		$this->debug("TwitterLogin doLogin()");
		$this->debug("TwitterLogin tmp pass is $pass.");

		// Put the temporary credentials in the session
		$this->session->set('tmp_name', $u->name);
		$this->session->set('tmp_pass', $pass);

		// login() calls authenticate() with username & password.
		// We should handle the authenticate() method so we can return true.
		$this->session->addHookAfter('authenticate', $this, 'authenticate');

		// Log them in
		$this->session->login($u->name, $pass);

		$this->doRedirect();
	}


	/**
     * Hook into the auth process to allow us to log users in.
     *
     * This works by setting a temporary "password" for the user in the session.
     * We check those against the values we supply ourself and return true.
     *
     * @param object $event     ProcessWire event
     * @return bool
     *
     */
    public function authenticate($event) {

    	$this->debug("hooked authenticate");

        if ($event->return) return;     // already authenticated

        $sess_name = $this->session->get('tmp_name');
        $sess_pass = $this->session->get('tmp_pass');

    	$this->debug("Sess name is $sess_name");
    	$this->debug("Sess pass is $sess_pass");

        $user = $event->arguments('user');
        $pass = $event->arguments('pass');

        if ($sess_name == $user->name && $sess_pass == $pass) {
        	$this->debug('match');
            $this->session->remove('sess_name');
            $this->session->remove('sess_pass');
            $event->return = true;
        } else {
            $event->return = false;
        }
    }


    /**
     * Execute the redirect to the configured page
     *
     */
	private function doRedirect() {

    	// Redirect to configured page
		$p = $this->pages->get($this->redirectPage);
		if ( ! $p->id) {
			$p = $this->pages->get(1);
		}

		$this->debug("Redirecting to {$p->httpUrl}");
		$this->session->redirect($p->httpUrl);
    }


	static public function getModuleConfigInputfields(Array $data) {

		$fields = new InputfieldWrapper();

		$modules = wire('modules');

		$f = $modules->get("InputfieldText");
		$f->columnWidth = 50;
		$f->attr('name', 'twitterKey');
		$f->attr('value', $data['twitterKey']);
		$f->label = "Twitter API key";
		$f->description = __('Twitter API Key. Create an app at https://apps.twitter.com/.');
		$fields->add($f);

		$f = $modules->get("InputfieldText");
		$f->columnWidth = 50;
		$f->attr('name', 'twitterSecret');
		$f->attr('value', $data['twitterSecret']);
		$f->label = "Twitter API secret";
		$f->description = __('API secret. Find this on the API Keys tab of the app settings page at https://apps.twitter.com/.');
		$fields->add($f);

		$f = wire('modules')->get('InputfieldAsmSelect');
		$f->attr('name', 'addRoles');
		foreach (wire('pages')->find('template=role, sort=name') as $role) {
			if ($role->name == 'guest') continue;
			$f->addOption($role->name, $role->name);
		}
		$f->attr('value', $data['addRoles']);
		$f->label = __('Roles to add to user');
		$f->description = __('Additional roles Persistent logins will be given to users with these roles. Leave empty to allow any user to receive persistent logins.');
		$fields->append($f);

		$field = $modules->get("InputfieldPageListSelect");
		$field->attr('name', 'redirectPage');
		$field->attr('value', $data['redirectPage']);
		$field->label = "Page where user is redirected after succesful login";
		$fields->add($field);

		return $fields;

	}


	public function install() {

		$name = self::moduleName;
		$fieldName = self::fieldName;

		$page = $this->pages->get("/$name/");
		if($page->id) throw new WireException("There is already a page installed called '/$name/'");

		$template = $this->templates->get($name);
		if($template) throw new WireException("There is already a template installed called '$name'");

		$fieldgroup = $this->fieldgroups->get($name);
		if($fieldgroup) throw new WireException("There is already a fieldgroup installed called '$name'");

		$field = $this->fields->get($fieldName);
		if($field) throw new WireException("There is already a field installed called '$fieldName'");

		$role = $this->roles->get($name);
		if (!$role->id) {
			$this->roles->add($name);
			$this->message("Create role called $name");
		}

		$fieldgroup = new Fieldgroup();
		$fieldgroup->name = $name;
		$title = $this->fields->get('title');
		if($title) $fieldgroup->add($title);
		$fieldgroup->save();

		$template = new Template();
		$template->name = $name;
		$template->fieldgroup = $fieldgroup;
		$template->allowPageNum = 1;
		$template->save();
		$this->message("Installed template $name");

		$page = new Page();
		$page->template = $template;
		$page->parent = '/';
		$page->name = $name;
		$page->title = "Twitter Login";
		$page->addStatus(Page::statusHidden);
		$page->save();
		$this->message("Installed page $page->path");

		$basename = $name . ".php";
		$src = $this->config->paths->TwitterLogin . $basename;
		$dst = $this->config->paths->templates . $basename;

		if ( ! file_exists($dst)) {
			if(@copy($src, $dst)) {
				$this->message("Installed template file $basename");
			}	else {
				$this->error("Unable to copy template file during installation.");
				$this->error("To complete the installation please copy $basename from $src to $dst.");
			}
		} else {
			$this->message("Template file $dst already exists (not overwriting).");
		}

		// Create hidden inputfield on user template
		$input = new InputfieldInteger;
		$input->set('collapsed', Inputfield::collapsedHidden);

		// Create field called twitter_id and set details and inputfield
		$f = new Field();
		$f->type = $this->modules->get("FieldtypeInteger");
		$f->name = $fieldName;
		$f->label = 'Twitter ID';
		$f->description = 'Stores Twitter ID for user';
		$f->inputfield = $input;
		$f->save();

		// Add the field to user fieldgroup (basically means user template in this context)
		$fg = $this->fieldgroups->get('user');
		$fg->add($f);
		$fg->save();
	}


	public function uninstall() {

		$name = self::moduleName;
		$fieldName = self::fieldName;

		// Get page using template
		$page = $this->pages->get("template=$name");
		if ($page->id) {
			$this->message("Deleted page: {$page->path}");
			$page->delete();
		}

		$template = $this->templates->get($name);
		if ($template->id) {
			$this->message("Deleted template: {$template->name}");
			$this->templates->delete($template);
		}

		$fieldgroup = $this->fieldgroups->get($name);
		if ($fieldgroup) {
			$this->message("Deleted fieldgroup: {$fieldgroup->name}");
			$this->fieldgroups->delete($fieldgroup);
		}

		// Does not remove the twitter_id field.
		// Does not remove the twitter-login role.
	}


	public function debug($line = '') {
		if ($this->debug) echo "$line<br>";
	}

}

/* End of file: TwitterLogin.module */